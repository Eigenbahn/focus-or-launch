#!/usr/bin/env python3

import os, sys
import subprocess
import argparse
import shlex
from pprint import pprint


# ---------------------------------------------------------------
# ARGS

parser = argparse.ArgumentParser()
parser.add_argument("--app-launch-command", help="command to use to launch program")
parser.add_argument("--app-class", help="window class")
args = parser.parse_args()

args.app_class_short = args.app_class.split('.')[0]

args.app_class_xlsclients = args.app_class.replace('.', '/')

DEBUG = False
# DEBUG = True


# ---------------------------------------------------------------
# FUNCTIONS

def get_current_desktop_id(wmctrl_d_output):
    for line in wmctrl_d_output:
        if line[3] == '*':
            return line.split(" ")[0]

def parse_wmctrl_l_output(output, filter_dektop_id_list=None):
    windows_dict = {}
    for line in output:
        window_id, desktop_id, *rest = list(filter(None, line.split(" ")))
        if filter_dektop_id_list is None or desktop_id in filter_dektop_id_list:
            windows_dict[window_id] = desktop_id
    return windows_dict

def parse_xlsclients_output(output, filter_window_id_list=None, filter_window_class_list=None):
    windows_dict = {}
    current_window = None
    for line in output:
        if line.startswith("Window "):
            current_window = line[len("Window "):-1]
            windows_dict[current_window] = {}
        else:
            k, v = map(str.strip, line.split(':', 1))
            windows_dict[current_window][k] = v

    if filter_window_id_list is not None:
        windows_dict = {k: v for k, v in windows_dict.items() if k in filter_window_id_list}

    if filter_window_class_list is not None:
        windows_dict = {k: v for k, v in windows_dict.items() if v['Instance/Class'] in filter_window_class_list}

    return windows_dict

def decimal_window_id_to_wmctrl_hexa(window_id):
    return '0x0' + hex(window_id)[2:]

def activate_windows(decimal_window_id):
    command = "xdotool windowactivate " + str(decimal_window_id)
    result = subprocess.run(command.split(' '))


# ---------------------------------------------------------------
# MAIN

# find out current desktop id
list_desktops_command = 'wmctrl -d'
result = subprocess.run(list_desktops_command.split(' '), stdout=subprocess.PIPE)
desktops_list = result.stdout.decode('utf-8')
desktops_list = list(filter(None, desktops_list.split("\n")))
current_desktop_id = get_current_desktop_id(desktops_list)

if DEBUG:
    print('current_desktop_id')
    pprint(current_desktop_id)

# get list of windows for current desktop
list_windows_command = 'wmctrl -l'
result = subprocess.run(list_windows_command.split(' '), stdout=subprocess.PIPE)
windows_list_raw = result.stdout.decode('utf-8')
windows_list_raw = list(filter(None, windows_list_raw.split("\n")))
current_dektop_window_id_list = (parse_wmctrl_l_output(windows_list_raw, [current_desktop_id])).keys()

if DEBUG:
    print('current_dektop_window_id_list')
    pprint(current_dektop_window_id_list)

# get list of windows matching class
list_windows_for_class_command = 'xdotool search -classname ' + args.app_class_short
result = subprocess.run(list_windows_for_class_command.split(' '), stdout=subprocess.PIPE)
window_id_list_for_class_raw = result.stdout.decode('utf-8')
window_id_list_for_class_raw = list(filter(None, window_id_list_for_class_raw.split("\n")))

# join the 2 results
open_on_current_desktop_list = []
for window_id in window_id_list_for_class_raw:
    wmctrl_window_id = decimal_window_id_to_wmctrl_hexa(int(window_id))
    if wmctrl_window_id in current_dektop_window_id_list:
        open_on_current_desktop_list.append(window_id)

# take action
if open_on_current_desktop_list:
    for window_id in open_on_current_desktop_list:
        activate_windows(window_id)
else:
    subprocess.run(shlex.split(args.app_launch_command))
